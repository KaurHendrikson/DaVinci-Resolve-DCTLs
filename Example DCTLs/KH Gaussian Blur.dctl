#line 2 // This line makes line numbers appear correctly in the log file
// DCTL by Kaur Hendrikson

__DEVICE__ inline float3 pixelFromXY(__TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB, int p_X, int p_Y) {
    return make_float3(
        _tex2D(p_TexR, p_X, p_Y),
        _tex2D(p_TexG, p_X, p_Y),
        _tex2D(p_TexB, p_X, p_Y)
    );
}

__DEVICE__ inline float gaussianFalloff(float x, float y, float size) {
    return _expf(-(x*x + y*y) / size);
}

__DEVICE__ float3 gaussianBlur(__TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB, int p_X, int p_Y, float size) {
    // Radius is just large enough to capture most of the falloff.
    int radius = _ceil(4.5f * size);
    float3 sum = make_float3(0.0f, 0.0f, 0.0f);
    float weight_sum = 0.0f;

    for (int i = -radius; i <= radius; i += 1) {
        for (int j = -radius; j <= radius; j += 1) {
            float weight = gaussianFalloff(i, j, size);
            sum += weight * pixelFromXY(p_TexR, p_TexG, p_TexB, p_X + i, p_Y + j);
            weight_sum += weight;
        }
    }

    return sum / weight_sum;
}

DEFINE_UI_PARAMS(p_Blur, Blur, DCTLUI_SLIDER_FLOAT, 0, 0, 16, 0.001)

// Main function
__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB) {
    float3 inRGB = pixelFromXY(p_TexR, p_TexG, p_TexB, p_X, p_Y);
    float3 out = inRGB;

    // Apply blur
    if (p_Blur > 0) out = gaussianBlur(p_TexR, p_TexG, p_TexB, p_X, p_Y, p_Blur);

    // Draw a green line at the bottom to indicate the DCTL is running without errors
    // if (p_Y < 10) out = make_float3(0, 1, 0);

    // Output the final result
    return out;
}